grammar org.xtext.example.umldsl.UmlDsl with org.eclipse.xtext.common.Terminals

generate umlDsl "http://www.xtext.org/example/umldsl/UmlDsl"

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
 
 
Model:
    elements+=Element*
;
 
Element:
    Class | Property | Association | PropertyEqualityConstraint | NumberRestrictionConstraint  //| Formular
;
 
Class:
	"class" name=ID "mapsTo" ref=[uml::Class|FQN]
; 
FQN returns ecore::EString:
    ID ("." ID)*
;

// UML-Mapping: --------------------------------------------------------
Property:
	"property" name=ID "mapsTo" ref=[uml::Property|FQN]
;

Association:
	"association" name=ID "mapsTo" ref=[uml::Association|FQN]
;

// Constraint:-----------------------------------------------------------
PropertyEqualityConstraint:
	"PropertyEqualityConstraint:" leftSite=[Property] (equality=STRING)? rightSite=[Property]
;

NumberRestrictionConstraint:
	"NumberRestrictionConstraint:" leftSite=[Property] (equality=STRING)? rightSite=INT
;





//Rule :
//	"rule" name=ID '{'
//	elements += AbstractElement*
//	'}'
//;

//Rule :
//	"rule" name=ID '{'
//	    rule=Constraint
//	'}'	
//;

//Constraint:
//	leftSite=Multi (equality=STRING)? rightSite=Multi
//;

//Multi:
//	{StringConstant} value=STRING|
//	{IntConstant} value=INT|
//	{PropertyRef} prop=[Property]
////	{ClassRef} class=[Class]
//;

// Expression-stuff:
AbstractElement:
	Variable | Expression 
;

Variable:
	name=ID '=' expression=Expression
;

Expression:Or;

Or returns Expression:
	And ({Or.left=current} "||" right=And)*
;

And returns Expression:
	Equality ({And.left=current} "&&" right=Equality)*
;

Equality returns Expression:
	Comparison(
		{Equality.left=current} op=("==" | "!=")
		right=Comparison
	)*
;
Comparison returns Expression:
	PlusOrMinus(
		{Comparison.left=current} op=(">="|"<="|">"|"<")
		right=PlusOrMinus		
	)*
;
PlusOrMinus returns Expression:
	MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
		right=MulOrDiv
	)*
;
MulOrDiv returns Expression:
	Primary(
		({MulOrDiv.left=current} op=('*'|'/'))
		right=Primary
	)*
;
Primary returns Expression:
	"(" Expression ')'|
	{Not} "!" expression=Primary |
	Atomic
;
Atomic returns Expression:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BoolConstant} value=('true'|'false')|
	{VariableRef} variable=[Variable]
;

// Forumlar-Creator: ----------------------------------------------------

//Formular:
//	"form"	name=ID '{'
//	formelement += Formelement*
//	'}'
//;
//
//Formelement:
//	TextArea | Label | LineBreak
//;
//
//TextArea:
//	"textarea" value=[Property]
//;
//
//Label:
//	"label" value=[Property]
//;
//
//LineBreak:
//	"lb"
//;
