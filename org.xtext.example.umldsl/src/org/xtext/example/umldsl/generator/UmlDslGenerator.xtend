/*
 * generated by Xtext
 */
package org.xtext.example.umldsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import java.util.ArrayList
import org.xtext.example.umldsl.umlDsl.Rule

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UmlDslGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//		for (e : resource.allContents.toIterable.filter(typeof(Class))) {
//			fsa.generateFile("uml-gen/" + e.name + ".java", e.compile)
//		}

		val propList = newArrayList()
		for(prop : resource.allContents.toIterable.filter(typeof(org.xtext.example.umldsl.umlDsl.Property))) {
			propList.add(prop)
		}

		val ruleList = newArrayList()
		for(rule : resource.allContents.toIterable.filter(typeof(Rule))) {
			ruleList.add(rule)
		}

		fsa.generateFile("umlgen/" + "FormularGenerator" + ".java", genMainApp(propList, ruleList))
	}

	def genMainApp(ArrayList<org.xtext.example.umldsl.umlDsl.Property> propList,ArrayList<Rule> ruleList) {
		'''		
			package umlgen;
			import javax.swing.JFrame;
			import javax.swing.event.DocumentListener;
			import javax.swing.event.DocumentEvent;
			import javax.swing.JTextField;
			import java.awt.GridLayout;
			import javax.swing.JLabel;
			import javax.swing.SwingUtilities;
			
			public class FormularGenerator extends JFrame {
			
			private DocumentListener listener = new DocumentListener() {
				public void insertUpdate(DocumentEvent p0) {
				  update();
				}
				public void removeUpdate(DocumentEvent p0) {
				  update();
				}
				public void changedUpdate(DocumentEvent p0) {
				  update();
				}
			};
			
			private JLabel errorLabel = new JLabel("ERROR -> Constraint failes");
			«FOR prop : propList»
			private JTextField ta_«prop.name» = new JTextField();
			«ENDFOR»
			
			
			  public FormularGenerator() {
			    setTitle("A formular");
			    setLayout(new GridLayout(0, 2));
			    			    
	    	«FOR prop : propList»
			ta_«prop.name».getDocument().addDocumentListener(listener);
	   		«ENDFOR»
			
		    «FOR prop : propList»
		    add(new JLabel("«prop.name»: "));
		    add(ta_«prop.name»);
			«ENDFOR»
				
			    add(errorLabel);
			    update();
			    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			    pack();
			    setVisible(true);
			  }
			
			  public void update() {
				 //errorLabel.setText(errorLabel.getText() + "E");
 		    «FOR rule : ruleList»
««« 		    errorLabel.setText(errorLabel.getText() + "«rule»");
««« 		    errorLabel.setText(errorLabel.getText() + "«rule.elements»");
««« 		    errorLabel.setText(errorLabel.getText() + "«rule.name»");
««« 		

		
			    
 		    «IF rule.rule.equality.equals("!=")»
 		    if(ta_«rule.rule.leftSite».getText().equals(ta_«rule.rule.rightSite».getText())){
 		    	  	errorLabel.setText(errorLabel.getText() + "Error: Rule1 is broken");
 		    	 		    	} else{
 		    	 		    		errorLabel.setText("");
 		    	 		    		}
 		    	«ENDIF»
 		    «IF rule.rule.equality.equals("==")»
 		    if(!(ta_«rule.rule.leftSite».getText().equals(ta_«rule.rule.rightSite».getText()))){
 		    	  	errorLabel.setText(errorLabel.getText() + "Error: Rule1 is broken");
 		    	 		    	} else{
 		    	 		    		errorLabel.setText("");
 		    	 		    		}
 		    	«ENDIF»
 		  
 		  
 		  //«rule»
 		  //«rule.name»
 		  //«rule.rule»
 		  //«rule.rule.leftSite.eClass»
			// «rule.rule.leftSite.eClass.name»
			// «rule.rule.leftSite.eClass.name == "PropertyRef"»
			// «rule.rule.leftSite.eClass.eResource»
			// «rule.rule.leftSite.eResource»
			// «rule.rule.leftSite.toString»
			// «rule.rule.leftSite.eContainer»
			// «rule.rule.leftSite.eClass.toString»
			//«rule.rule.eClass»
			//«rule.rule.eClass.name»
			//«rule.rule.eClass.name == "PropertyEquilityConstraint"»
 		    		
 		    		
 		    «IF rule.rule.eClass != null && rule.rule.eClass.name.equals("PropertyEquilityConstraint")»	
 		    // Geht!	    
 		    «ENDIF»
 			«ENDFOR»
				 
				 }
			
			  public static void main(String[] args) {
			    SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			        new FormularGenerator();
			      }
			    });
			  }
			}
			'''
	}
}
